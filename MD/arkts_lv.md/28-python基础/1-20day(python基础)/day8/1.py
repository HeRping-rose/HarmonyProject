#函数
# 函数的作用是： 把一系列的代码包装起来（组织到一起）去完成【一个】特定的任务，并且，可以使这个任务可以在任何时候任何地方，反复调用（执行）
# 函数的作用是： 1.封装 2.复用
#def 定义函数的关键字   fnname函数名（自定义的） （）形参  pass函数体（放要封装的代码）
def fnname():
    pass

# 函数名接一个小括号，就是在调用函数。在没有调用函数前，函数本身是不会执行的。它只会以字符串的形式存在于内存中。
fnname() #当调用时，取出函数，放到 执行作用域中，把函数体中的代码从上往下执行一遍

#函数的返回值 : 把函数中出现在return 跟着的数据返回到函数外部
#1.当函数中出现了return 在return往下面的行都不会再执行了，也就是说return可以起到终止函数执行的目的
#2.返回值就是把return后边的值返回到函数外部，但外部一定是要接收才行
#3.如果一个函数没有写return / return 后面没有跟值，默认的返回值是 None
def xx(a,b):
    #返回的不是a也不是b也不是a+b，是a+b计算完成后的结果也就是 把3返回
    return a+b
#如果返回值没有接收，会丢弃
# xx(1,2)

#新建一个变量叫result, 先执行xx(1,2)函数，把函数中的代码执行一遍，发现有一个是return，那么会return后的值
#取出， 赋值给result
result = xx(1,2)  #错误理解：1 reslut等于xx函数
print(result)

print(xx(1,2)) #打印： 但是发现放的是一个 函数调用，那么就会先调用函数，得到返回值，再把这个返回值打印出来

#返回值的意义： 一个函数只能做一件事，如果 一件事的输入依赖于另一件事的输出，返回值
#
# def sum(l):
#     total = 0
#     for i in l:
#         total+=i
#     return total
#
# l = [12,435,5,56,76]
# total = sum(l)
#
# avg = total/len(l)
# print(...)
# ....
# def sum(l):
#     total = 0
#     for i in l:
#         total+=i
#     return total
#
# l = [12,435,5,56,76]
# total = sum(l)
#
# avg = total/len(l)
# print(...)
# ....













